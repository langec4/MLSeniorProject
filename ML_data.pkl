{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "df74aae0-6919-406f-9bb4-807bb611ca0b",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2484579770.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[6], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    Malware Dataset: https://github.com/emr4h/Malware-Detection-Using-Machine-Learning/tree/main/data-set\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Malware Dataset: https://github.com/emr4h/Malware-Detection-Using-Machine-Learning/tree/main/data-set \n",
    "\n",
    "Address Point Of Entry: Refers to a specific address in memory where the execution of a malicious program starts. Most malicious files use same entry points, so this could help in identifying malware vs legit files as legit files have different entry points as a whole.\n",
    " \n",
    "Major Linker Version: Refers to specific version of a linker that compiles the source code of an execuatble and links them to a library so that they can be executed. Malicious files may use specific linkers or (techniques of linking to libraries or other executables).\n",
    " \n",
    "Major Image Version: Refers to the compiled binary file of the malware as malware may have specific compiled patterns compared to legit files.\n",
    " \n",
    "Major Operating System Version: Refers to the OS version that is required to run the malware. Some OS may be targeted more than others, especially when downloading malware.\n",
    " \n",
    "DLL Characteristics: Refers to Dynamic Link Libraries used when executing a file (malware). Could show how executable interacts in a malicious or legit way (if they interact with security features and try to access permissions).\n",
    " \n",
    "Size of Stack Reserve: Refers to how many stack frames are reserved for executable file. Malicious files could try to reserve very large stack frames for different attack staregies.\n",
    " \n",
    "Number Of Sections.data: Refers to sections of different parts program has when linker compiles files into final version of executable. Malicious files may have large data amounts in various sections. These sections may be encoded, obfruscated, etc... to make them harder to detect. Larger sections may indicate more malicious behavior.\n",
    " \n",
    "Resource Size: Refers to resouces used by executable (strings, images, icons, calls to outside sources). Malicious files may use similar icons, images, calls, etc... which could be used to compare to legit resource sizes that do not have these things in them.\n",
    " \n",
    "Legitimate Data: Either 0 legit, or 1 malicious (labels associated with distinguishing in our dataset).\n",
    "has context menu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "a612ff7d-d60a-4cb7-ba44-69e9ef661e7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of the of the legit dataset is: 41323 sample, 1 features\n",
      "The shape of the of the malware dataset is: 96121 sample, 1 features\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "malData = pd.read_csv(\"MalwareData.csv\", sep=\"|\") #reads the MalwareData.csv file \n",
    "\n",
    "legit = malData[0:41323].drop([\"legitimate\"], axis=1, errors='ignore') #slices the malData to include the first 41,323 rows\n",
    "mal = malData[41323::].drop([\"legitimate\"], axis=1, errors='ignore') #slices the malData to include from 41,323 till the end\n",
    "\n",
    "print(\"The shape of the of the legit dataset is: %s sample, %s features\"%(legit.shape[0],legit.shape[1])) #prints the shape of the legit dataset\n",
    "print(\"The shape of the of the malware dataset is: %s sample, %s features\"%(mal.shape[0],mal.shape[1])) #prints the shape of the malware dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "8e9148a1-d42b-400e-b864-c27359648185",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  AddressOfEntryPoint MajorLinkerVersion MajorImageVersion  \\\n",
      "0               10407                                        \n",
      "1                5354                                        \n",
      "2               58807                                        \n",
      "3               25166                                        \n",
      "4               70387                                        \n",
      "\n",
      "  MajorOperatingSystemVersion DllCharacteristics SizeOfStackReserve  \\\n",
      "0                                                                     \n",
      "1                                                                     \n",
      "2                                                                     \n",
      "3                                                                     \n",
      "4                                                                     \n",
      "\n",
      "  NumberOfSections ResourceSize legitimate Entropy ImportCount Packed  \\\n",
      "0                                                                       \n",
      "1                                                                       \n",
      "2                                                                       \n",
      "3                                                                       \n",
      "4                                                                       \n",
      "\n",
      "  Timestamp  \n",
      "0            \n",
      "1            \n",
      "2            \n",
      "3            \n",
      "4            \n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "e760db85-e445-43ce-96bf-47e63cd015ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['AddressOfEntryPoint', 'MajorLinkerVersion', 'MajorImageVersion',\n",
      "       'MajorOperatingSystemVersion', 'DllCharacteristics',\n",
      "       'SizeOfStackReserve', 'NumberOfSections', 'ResourceSize', 'legitimate',\n",
      "       'Entropy', 'ImportCount', 'Packed', 'Timestamp'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(malData.columns) #prints the names of the columns in the dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "529c3c38-4c5f-4205-b58a-41b68d71039d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    AddressOfEntryPoint  MajorLinkerVersion  MajorImageVersion  \\\n",
      "0                 10407                 NaN                NaN   \n",
      "1                  5354                 NaN                NaN   \n",
      "2                 58807                 NaN                NaN   \n",
      "3                 25166                 NaN                NaN   \n",
      "4                 70387                 NaN                NaN   \n",
      "5                  5856                 NaN                NaN   \n",
      "6                 26798                 NaN                NaN   \n",
      "7                 28581                 NaN                NaN   \n",
      "8                 72841                 NaN                NaN   \n",
      "9                  6541                 NaN                NaN   \n",
      "10                16320                 NaN                NaN   \n",
      "11                35457                 NaN                NaN   \n",
      "12                82426                 NaN                NaN   \n",
      "13                56384                 NaN                NaN   \n",
      "14                 5211                 NaN                NaN   \n",
      "15               119081                 NaN                NaN   \n",
      "16                13410                 NaN                NaN   \n",
      "17               261025                 NaN                NaN   \n",
      "18                39564                 NaN                NaN   \n",
      "19               107200                 NaN                NaN   \n",
      "20                45623                 NaN                NaN   \n",
      "21                30579                 NaN                NaN   \n",
      "22                29115                 NaN                NaN   \n",
      "23                50674                 NaN                NaN   \n",
      "24                 5641                 NaN                NaN   \n",
      "25                 5641                 NaN                NaN   \n",
      "26                18990                 NaN                NaN   \n",
      "27                10651                 NaN                NaN   \n",
      "28                10987                 NaN                NaN   \n",
      "29                 5559                 NaN                NaN   \n",
      "\n",
      "    MajorOperatingSystemVersion  DllCharacteristics  SizeOfStackReserve  \\\n",
      "0                           NaN                 NaN                 NaN   \n",
      "1                           NaN                 NaN                 NaN   \n",
      "2                           NaN                 NaN                 NaN   \n",
      "3                           NaN                 NaN                 NaN   \n",
      "4                           NaN                 NaN                 NaN   \n",
      "5                           NaN                 NaN                 NaN   \n",
      "6                           NaN                 NaN                 NaN   \n",
      "7                           NaN                 NaN                 NaN   \n",
      "8                           NaN                 NaN                 NaN   \n",
      "9                           NaN                 NaN                 NaN   \n",
      "10                          NaN                 NaN                 NaN   \n",
      "11                          NaN                 NaN                 NaN   \n",
      "12                          NaN                 NaN                 NaN   \n",
      "13                          NaN                 NaN                 NaN   \n",
      "14                          NaN                 NaN                 NaN   \n",
      "15                          NaN                 NaN                 NaN   \n",
      "16                          NaN                 NaN                 NaN   \n",
      "17                          NaN                 NaN                 NaN   \n",
      "18                          NaN                 NaN                 NaN   \n",
      "19                          NaN                 NaN                 NaN   \n",
      "20                          NaN                 NaN                 NaN   \n",
      "21                          NaN                 NaN                 NaN   \n",
      "22                          NaN                 NaN                 NaN   \n",
      "23                          NaN                 NaN                 NaN   \n",
      "24                          NaN                 NaN                 NaN   \n",
      "25                          NaN                 NaN                 NaN   \n",
      "26                          NaN                 NaN                 NaN   \n",
      "27                          NaN                 NaN                 NaN   \n",
      "28                          NaN                 NaN                 NaN   \n",
      "29                          NaN                 NaN                 NaN   \n",
      "\n",
      "    NumberOfSections  ResourceSize  legitimate  Entropy  ImportCount  Packed  \\\n",
      "0                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "1                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "2                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "3                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "4                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "5                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "6                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "7                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "8                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "9                NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "10               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "11               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "12               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "13               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "14               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "15               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "16               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "17               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "18               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "19               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "20               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "21               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "22               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "23               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "24               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "25               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "26               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "27               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "28               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "29               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "\n",
      "    Timestamp  \n",
      "0         NaN  \n",
      "1         NaN  \n",
      "2         NaN  \n",
      "3         NaN  \n",
      "4         NaN  \n",
      "5         NaN  \n",
      "6         NaN  \n",
      "7         NaN  \n",
      "8         NaN  \n",
      "9         NaN  \n",
      "10        NaN  \n",
      "11        NaN  \n",
      "12        NaN  \n",
      "13        NaN  \n",
      "14        NaN  \n",
      "15        NaN  \n",
      "16        NaN  \n",
      "17        NaN  \n",
      "18        NaN  \n",
      "19        NaN  \n",
      "20        NaN  \n",
      "21        NaN  \n",
      "22        NaN  \n",
      "23        NaN  \n",
      "24        NaN  \n",
      "25        NaN  \n",
      "26        NaN  \n",
      "27        NaN  \n",
      "28        NaN  \n",
      "29        NaN  \n"
     ]
    }
   ],
   "source": [
    "print(malData.head(30)) #prints the first 30 columns/rows\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "4c62feed-5b81-437c-b9c5-0e3b2d7f73c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option(\"display.max_columns\", None) #tells how many columns to display when you print the dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "f4a5c857-3a83-4c50-9ed0-a3f95fcc58bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  AddressOfEntryPoint,MajorLinkerVersion,MajorImageVersion,MajorOperatingSystemVersion,DllCharacteristics,SizeOfStackReserve,NumberOfSections,ResourceSize,legitimate,Entropy,ImportCount,Packed,Timestamp\n",
      "1  5354,9,6,6,33088,262144,4,952,1,7.802857225639...                                                                                                                                                      \n"
     ]
    }
   ],
   "source": [
    "print(legit.take([1])) #prints the name of columns and the values in the rows for each section\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "f94b21ce-3070-4f94-8f9c-b85a548d5109",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      AddressOfEntryPoint,MajorLinkerVersion,MajorImageVersion,MajorOperatingSystemVersion,DllCharacteristics,SizeOfStackReserve,NumberOfSections,ResourceSize,legitimate,Entropy,ImportCount,Packed,Timestamp\n",
      "41324  61532,10,0,5,33088,1048576,5,9640,0,7.63961949...                                                                                                                                                      \n"
     ]
    }
   ],
   "source": [
    "print(mal.take([1]))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "3162e40f-e6dd-4993-a8a5-5bb4415f2c14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   AddressOfEntryPoint  MajorLinkerVersion  MajorImageVersion  \\\n",
      "0                10407                 NaN                NaN   \n",
      "1                 5354                 NaN                NaN   \n",
      "2                58807                 NaN                NaN   \n",
      "3                25166                 NaN                NaN   \n",
      "4                70387                 NaN                NaN   \n",
      "\n",
      "   MajorOperatingSystemVersion  DllCharacteristics  SizeOfStackReserve  \\\n",
      "0                          NaN                 NaN                 NaN   \n",
      "1                          NaN                 NaN                 NaN   \n",
      "2                          NaN                 NaN                 NaN   \n",
      "3                          NaN                 NaN                 NaN   \n",
      "4                          NaN                 NaN                 NaN   \n",
      "\n",
      "   NumberOfSections  ResourceSize  legitimate  Entropy  ImportCount  Packed  \\\n",
      "0               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "1               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "2               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "3               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "4               NaN           NaN         NaN      NaN          NaN     NaN   \n",
      "\n",
      "   Timestamp  \n",
      "0        NaN  \n",
      "1        NaN  \n",
      "2        NaN  \n",
      "3        NaN  \n",
      "4        NaN  \n"
     ]
    }
   ],
   "source": [
    "print(malData.head(5)) #prints first five rows/columns with values and names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "ac5c78d5-4ed4-4627-ad32-b9186e7f4a50",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option(\"display.max_columns\", None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "f595c065-34f5-42df-96cf-4cc7edce8407",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of columns after split: 1\n",
      "  AddressOfEntryPoint MajorLinkerVersion MajorImageVersion  \\\n",
      "0               10407               None              None   \n",
      "1                5354               None              None   \n",
      "2               58807               None              None   \n",
      "3               25166               None              None   \n",
      "4               70387               None              None   \n",
      "\n",
      "  MajorOperatingSystemVersion DllCharacteristics SizeOfStackReserve  \\\n",
      "0                        None               None               None   \n",
      "1                        None               None               None   \n",
      "2                        None               None               None   \n",
      "3                        None               None               None   \n",
      "4                        None               None               None   \n",
      "\n",
      "  NumberOfSections ResourceSize legitimate Entropy ImportCount Packed  \\\n",
      "0             None         None       None    None        None   None   \n",
      "1             None         None       None    None        None   None   \n",
      "2             None         None       None    None        None   None   \n",
      "3             None         None       None    None        None   None   \n",
      "4             None         None       None    None        None   None   \n",
      "\n",
      "  Timestamp  \n",
      "0      None  \n",
      "1      None  \n",
      "2      None  \n",
      "3      None  \n",
      "4      None  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset as a single column with raw data\n",
    "malData = pd.read_csv('MalwareData.csv', header=0, delimiter=None, engine='python', dtype=str)\n",
    "\n",
    "# Fill any missing values with an empty string to ensure compatibility with .str.split()\n",
    "malData = malData.fillna('')\n",
    "\n",
    "# Split the single column into separate columns based on commas\n",
    "malData_expanded = malData.iloc[:, 0].str.split(',', expand=True)\n",
    "\n",
    "# Check the number of columns created after the split\n",
    "print(\"Number of columns after split:\", malData_expanded.shape[1])\n",
    "\n",
    "# Define the expected column names\n",
    "column_names = [\n",
    "    'AddressOfEntryPoint', 'MajorLinkerVersion', 'MajorImageVersion',\n",
    "    'MajorOperatingSystemVersion', 'DllCharacteristics', 'SizeOfStackReserve',\n",
    "    'NumberOfSections', 'ResourceSize', 'legitimate', 'Entropy', 'ImportCount', \n",
    "    'Packed', 'Timestamp'\n",
    "]\n",
    "\n",
    "# Add extra columns if fewer than 13 columns are created\n",
    "for i in range(len(column_names) - malData_expanded.shape[1]):\n",
    "    malData_expanded[f'Extra{i}'] = None\n",
    "\n",
    "# Rename columns based on expected names\n",
    "malData_expanded.columns = column_names\n",
    "\n",
    "# Save the cleaned dataset back to CSV\n",
    "malData_expanded.to_csv('MalwareData.csv', index=False)\n",
    "\n",
    "# Display the first few rows to confirm\n",
    "print(malData_expanded.head())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "9ce7d491-7f88-4ded-a2a5-11249b54f66a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  AddressOfEntryPoint MajorLinkerVersion MajorImageVersion  \\\n",
      "0               10407                                        \n",
      "1                5354                                        \n",
      "2               58807                                        \n",
      "3               25166                                        \n",
      "4               70387                                        \n",
      "\n",
      "  MajorOperatingSystemVersion DllCharacteristics SizeOfStackReserve  \\\n",
      "0                                                                     \n",
      "1                                                                     \n",
      "2                                                                     \n",
      "3                                                                     \n",
      "4                                                                     \n",
      "\n",
      "  NumberOfSections ResourceSize legitimate Entropy ImportCount Packed  \\\n",
      "0                                                                       \n",
      "1                                                                       \n",
      "2                                                                       \n",
      "3                                                                       \n",
      "4                                                                       \n",
      "\n",
      "  Timestamp  \n",
      "0            \n",
      "1            \n",
      "2            \n",
      "3            \n",
      "4            \n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "import pandas as pd\n",
    "\n",
    "# Define the expected column names\n",
    "column_names = [\n",
    "    'AddressOfEntryPoint', 'MajorLinkerVersion', 'MajorImageVersion',\n",
    "    'MajorOperatingSystemVersion', 'DllCharacteristics', 'SizeOfStackReserve',\n",
    "    'NumberOfSections', 'ResourceSize', 'legitimate', 'Entropy', 'ImportCount', \n",
    "    'Packed', 'Timestamp'\n",
    "]\n",
    "\n",
    "# Use the csv module to read the file and manually parse each line\n",
    "data = []\n",
    "with open('MalwareData.csv', 'r') as file:\n",
    "    reader = csv.reader(file)\n",
    "    for row in reader:\n",
    "        data.append(row)\n",
    "\n",
    "# Create a DataFrame from the parsed data, skipping the header row\n",
    "malData_expanded = pd.DataFrame(data[1:], columns=column_names)\n",
    "\n",
    "# Save the cleaned DataFrame back to the CSV file\n",
    "malData_expanded.to_csv('MalwareData.csv', index=False)\n",
    "\n",
    "# Display the first few rows to confirm the changes\n",
    "print(malData_expanded.head())\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "e98549f6-0f92-4edc-9cfa-bac89afb9410",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "Can only use .str accessor with string values!",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[150], line 7\u001b[0m\n\u001b[1;32m      4\u001b[0m malData \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMalwareData.csv\u001b[39m\u001b[38;5;124m'\u001b[39m, header\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m, delimiter\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, engine\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# Split the single column into separate columns based on commas\u001b[39;00m\n\u001b[0;32m----> 7\u001b[0m malData_expanded \u001b[38;5;241m=\u001b[39m \u001b[43mmalData\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43miloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstr\u001b[49m\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m,\u001b[39m\u001b[38;5;124m'\u001b[39m, expand\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m# Check how many columns were created\u001b[39;00m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNumber of columns after split:\u001b[39m\u001b[38;5;124m\"\u001b[39m, malData_expanded\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m])\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py:6299\u001b[0m, in \u001b[0;36mNDFrame.__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6292\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m   6293\u001b[0m     name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_internal_names_set\n\u001b[1;32m   6294\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_metadata\n\u001b[1;32m   6295\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessors\n\u001b[1;32m   6296\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_info_axis\u001b[38;5;241m.\u001b[39m_can_hold_identifiers_and_holds_name(name)\n\u001b[1;32m   6297\u001b[0m ):\n\u001b[1;32m   6298\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[name]\n\u001b[0;32m-> 6299\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mobject\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__getattribute__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/accessor.py:224\u001b[0m, in \u001b[0;36mCachedAccessor.__get__\u001b[0;34m(self, obj, cls)\u001b[0m\n\u001b[1;32m    221\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m obj \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    222\u001b[0m     \u001b[38;5;66;03m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[39;00m\n\u001b[1;32m    223\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessor\n\u001b[0;32m--> 224\u001b[0m accessor_obj \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_accessor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    225\u001b[0m \u001b[38;5;66;03m# Replace the property with the accessor object. Inspired by:\u001b[39;00m\n\u001b[1;32m    226\u001b[0m \u001b[38;5;66;03m# https://www.pydanny.com/cached-property.html\u001b[39;00m\n\u001b[1;32m    227\u001b[0m \u001b[38;5;66;03m# We need to use object.__setattr__ because we overwrite __setattr__ on\u001b[39;00m\n\u001b[1;32m    228\u001b[0m \u001b[38;5;66;03m# NDFrame\u001b[39;00m\n\u001b[1;32m    229\u001b[0m \u001b[38;5;28mobject\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__setattr__\u001b[39m(obj, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_name, accessor_obj)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/strings/accessor.py:191\u001b[0m, in \u001b[0;36mStringMethods.__init__\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, data) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    189\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcore\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01marrays\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mstring_\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m StringDtype\n\u001b[0;32m--> 191\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_inferred_dtype \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    192\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_categorical \u001b[38;5;241m=\u001b[39m \u001b[38;5;28misinstance\u001b[39m(data\u001b[38;5;241m.\u001b[39mdtype, CategoricalDtype)\n\u001b[1;32m    193\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_string \u001b[38;5;241m=\u001b[39m \u001b[38;5;28misinstance\u001b[39m(data\u001b[38;5;241m.\u001b[39mdtype, StringDtype)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/strings/accessor.py:245\u001b[0m, in \u001b[0;36mStringMethods._validate\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    242\u001b[0m inferred_dtype \u001b[38;5;241m=\u001b[39m lib\u001b[38;5;241m.\u001b[39minfer_dtype(values, skipna\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m    244\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inferred_dtype \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m allowed_types:\n\u001b[0;32m--> 245\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCan only use .str accessor with string values!\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    246\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m inferred_dtype\n",
      "\u001b[0;31mAttributeError\u001b[0m: Can only use .str accessor with string values!"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset as a single column without specifying any separator\n",
    "malData = pd.read_csv('MalwareData.csv', header=0, delimiter=None, engine='python')\n",
    "\n",
    "# Split the single column into separate columns based on commas\n",
    "malData_expanded = malData.iloc[:, 0].str.split(',', expand=True)\n",
    "\n",
    "# Check how many columns were created\n",
    "print(\"Number of columns after split:\", malData_expanded.shape[1])\n",
    "\n",
    "# Define the correct column names for all 13 columns\n",
    "column_names = [\n",
    "    'AddressOfEntryPoint', 'MajorLinkerVersion', 'MajorImageVersion',\n",
    "    'MajorOperatingSystemVersion', 'DllCharacteristics', 'SizeOfStackReserve',\n",
    "    'NumberOfSections', 'ResourceSize', 'legitimate', 'Entropy', 'ImportCount', \n",
    "    'Packed', 'Timestamp'\n",
    "]\n",
    "\n",
    "# Ensure malData_expanded has exactly 13 columns\n",
    "# If there are fewer than 13 columns, add empty columns\n",
    "if malData_expanded.shape[1] < 13:\n",
    "    for i in range(13 - malData_expanded.shape[1]):\n",
    "        malData_expanded[f'Extra{i}'] = None\n",
    "\n",
    "# Rename columns based on expected names\n",
    "malData_expanded.columns = column_names\n",
    "\n",
    "# Save the updated dataset back to the CSV file\n",
    "malData_expanded.to_csv('MalwareData.csv', index=False)\n",
    "\n",
    "# Display the first few rows to confirm the changes\n",
    "print(malData_expanded.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "b5b34d41-25c4-4865-9b11-8a703c81f9f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# RF (Random Forest Algorithm) Takes the output from multiple decision trees to provide a result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "da2f27ad-3ac4-42de-b937-f15e94c8dff4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "23c30df4-efc8-4dcf-9870-ec1d7b836f0f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Input y contains NaN.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[149], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m labels \u001b[38;5;241m=\u001b[39m malData[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlegitimate\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvalues \u001b[38;5;66;03m#creates an array called labels that holds the values from the legitamate section\u001b[39;00m\n\u001b[1;32m      8\u001b[0m extratrees \u001b[38;5;241m=\u001b[39m ExtraTreesClassifier() \u001b[38;5;66;03m#initalizes a extratrees object. Used for classification tasks\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[43mextratrees\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata_in\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;66;03m#trains the ExtraTreesClassifier using the data_in features and the labels\u001b[39;00m\n\u001b[1;32m     10\u001b[0m select \u001b[38;5;241m=\u001b[39m SelectFromModel(extratrees,prefit\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m) \u001b[38;5;66;03m#intializes a selectfromModel object based on importance scores from extratrees\u001b[39;00m\n\u001b[1;32m     11\u001b[0m data_in_new \u001b[38;5;241m=\u001b[39m select\u001b[38;5;241m.\u001b[39mtransform(data_in) \u001b[38;5;66;03m#transforms original data_in array to only select important features chose by extratrees. Result stored in data_in_new array\u001b[39;00m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/base.py:1473\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1466\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[1;32m   1468\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[1;32m   1469\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[1;32m   1470\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[1;32m   1471\u001b[0m     )\n\u001b[1;32m   1472\u001b[0m ):\n\u001b[0;32m-> 1473\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfit_method\u001b[49m\u001b[43m(\u001b[49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/ensemble/_forest.py:363\u001b[0m, in \u001b[0;36mBaseForest.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    360\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m issparse(y):\n\u001b[1;32m    361\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msparse multilabel-indicator for y is not supported.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 363\u001b[0m X, y \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    364\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    365\u001b[0m \u001b[43m    \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    366\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmulti_output\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    367\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsc\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    368\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mDTYPE\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    369\u001b[0m \u001b[43m    \u001b[49m\u001b[43mforce_all_finite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    370\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    371\u001b[0m \u001b[38;5;66;03m# _compute_missing_values_in_feature_mask checks if X has missing values and\u001b[39;00m\n\u001b[1;32m    372\u001b[0m \u001b[38;5;66;03m# will raise an error if the underlying tree base estimator can't handle missing\u001b[39;00m\n\u001b[1;32m    373\u001b[0m \u001b[38;5;66;03m# values. Only the criterion is required to determine if the tree supports\u001b[39;00m\n\u001b[1;32m    374\u001b[0m \u001b[38;5;66;03m# missing values.\u001b[39;00m\n\u001b[1;32m    375\u001b[0m estimator \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimator)(criterion\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcriterion)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/base.py:650\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001b[0m\n\u001b[1;32m    648\u001b[0m         y \u001b[38;5;241m=\u001b[39m check_array(y, input_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124my\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcheck_y_params)\n\u001b[1;32m    649\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 650\u001b[0m         X, y \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_X_y\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcheck_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    651\u001b[0m     out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[1;32m    653\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m check_params\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mensure_2d\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m):\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py:1318\u001b[0m, in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1297\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1298\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m requires y to be passed, but the target y is None\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1299\u001b[0m     )\n\u001b[1;32m   1301\u001b[0m X \u001b[38;5;241m=\u001b[39m check_array(\n\u001b[1;32m   1302\u001b[0m     X,\n\u001b[1;32m   1303\u001b[0m     accept_sparse\u001b[38;5;241m=\u001b[39maccept_sparse,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1315\u001b[0m     input_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   1316\u001b[0m )\n\u001b[0;32m-> 1318\u001b[0m y \u001b[38;5;241m=\u001b[39m \u001b[43m_check_y\u001b[49m\u001b[43m(\u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmulti_output\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmulti_output\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_numeric\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43my_numeric\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mestimator\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1320\u001b[0m check_consistent_length(X, y)\n\u001b[1;32m   1322\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m X, y\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py:1328\u001b[0m, in \u001b[0;36m_check_y\u001b[0;34m(y, multi_output, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1326\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Isolated part of check_X_y dedicated to y validation\"\"\"\u001b[39;00m\n\u001b[1;32m   1327\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m multi_output:\n\u001b[0;32m-> 1328\u001b[0m     y \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1329\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1330\u001b[0m \u001b[43m        \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1331\u001b[0m \u001b[43m        \u001b[49m\u001b[43mforce_all_finite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1332\u001b[0m \u001b[43m        \u001b[49m\u001b[43mensure_2d\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1333\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1334\u001b[0m \u001b[43m        \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43my\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1335\u001b[0m \u001b[43m        \u001b[49m\u001b[43mestimator\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1336\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1337\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1338\u001b[0m     estimator_name \u001b[38;5;241m=\u001b[39m _check_estimator_name(estimator)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py:1064\u001b[0m, in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m   1058\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1059\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFound array with dim \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m. \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m expected <= 2.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1060\u001b[0m         \u001b[38;5;241m%\u001b[39m (array\u001b[38;5;241m.\u001b[39mndim, estimator_name)\n\u001b[1;32m   1061\u001b[0m     )\n\u001b[1;32m   1063\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m force_all_finite:\n\u001b[0;32m-> 1064\u001b[0m     \u001b[43m_assert_all_finite\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1065\u001b[0m \u001b[43m        \u001b[49m\u001b[43marray\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1066\u001b[0m \u001b[43m        \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minput_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1067\u001b[0m \u001b[43m        \u001b[49m\u001b[43mestimator_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1068\u001b[0m \u001b[43m        \u001b[49m\u001b[43mallow_nan\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_all_finite\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m==\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mallow-nan\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1069\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1071\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m copy:\n\u001b[1;32m   1072\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m _is_numpy_namespace(xp):\n\u001b[1;32m   1073\u001b[0m         \u001b[38;5;66;03m# only make a copy if `array` and `array_orig` may share memory`\u001b[39;00m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py:123\u001b[0m, in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m first_pass_isfinite:\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[0;32m--> 123\u001b[0m \u001b[43m_assert_all_finite_element_wise\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    124\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    125\u001b[0m \u001b[43m    \u001b[49m\u001b[43mxp\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mxp\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    126\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_nan\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mallow_nan\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    127\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmsg_dtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmsg_dtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    128\u001b[0m \u001b[43m    \u001b[49m\u001b[43mestimator_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    129\u001b[0m \u001b[43m    \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minput_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    130\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py:172\u001b[0m, in \u001b[0;36m_assert_all_finite_element_wise\u001b[0;34m(X, xp, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[1;32m    155\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m estimator_name \u001b[38;5;129;01mand\u001b[39;00m input_name \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m has_nan_error:\n\u001b[1;32m    156\u001b[0m     \u001b[38;5;66;03m# Improve the error message on how to handle missing values in\u001b[39;00m\n\u001b[1;32m    157\u001b[0m     \u001b[38;5;66;03m# scikit-learn.\u001b[39;00m\n\u001b[1;32m    158\u001b[0m     msg_err \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    159\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not accept missing values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    160\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m encoded as NaN natively. For supervised learning, you might want\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    170\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m#estimators-that-handle-nan-values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    171\u001b[0m     )\n\u001b[0;32m--> 172\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg_err)\n",
      "\u001b[0;31mValueError\u001b[0m: Input y contains NaN."
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset again or redefine malData\n",
    "malData = pd.read_csv('MalwareData.csv')  \n",
    "# creates a new array called data_in using the three columns \n",
    "data_in = malData.drop(['AddressOfEntryPoint', 'ResourceSize', 'legitimate'], axis=1, errors='ignore').values \n",
    "labels = malData['legitimate'].values #creates an array called labels that holds the values from the legitamate section\n",
    "extratrees = ExtraTreesClassifier() #initalizes a extratrees object. Used for classification tasks\n",
    "extratrees.fit(data_in, labels) #trains the ExtraTreesClassifier using the data_in features and the labels\n",
    "select = SelectFromModel(extratrees,prefit=True) #intializes a selectfromModel object based on importance scores from extratrees\n",
    "data_in_new = select.transform(data_in) #transforms original data_in array to only select important features chose by extratrees. Result stored in data_in_new array\n",
    "print(data_in.shape,data_in_new.shape) #prints the number of shapes and features/rows/columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "08c43e85-7483-4c13-9a91-974d092d5e3d",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "Can only use .str accessor with string values!",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[146], line 7\u001b[0m\n\u001b[1;32m      4\u001b[0m malData \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMalwareData.csv\u001b[39m\u001b[38;5;124m'\u001b[39m, header\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# Split the first column, which contains multiple features, into separate columns\u001b[39;00m\n\u001b[0;32m----> 7\u001b[0m malData_expanded \u001b[38;5;241m=\u001b[39m \u001b[43mmalData\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43miloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstr\u001b[49m\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m,\u001b[39m\u001b[38;5;124m'\u001b[39m, expand\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m# Check how many columns were created\u001b[39;00m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNumber of columns after split:\u001b[39m\u001b[38;5;124m\"\u001b[39m, malData_expanded\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m])\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py:6299\u001b[0m, in \u001b[0;36mNDFrame.__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6292\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m   6293\u001b[0m     name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_internal_names_set\n\u001b[1;32m   6294\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_metadata\n\u001b[1;32m   6295\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessors\n\u001b[1;32m   6296\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_info_axis\u001b[38;5;241m.\u001b[39m_can_hold_identifiers_and_holds_name(name)\n\u001b[1;32m   6297\u001b[0m ):\n\u001b[1;32m   6298\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[name]\n\u001b[0;32m-> 6299\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mobject\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__getattribute__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/accessor.py:224\u001b[0m, in \u001b[0;36mCachedAccessor.__get__\u001b[0;34m(self, obj, cls)\u001b[0m\n\u001b[1;32m    221\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m obj \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    222\u001b[0m     \u001b[38;5;66;03m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[39;00m\n\u001b[1;32m    223\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_accessor\n\u001b[0;32m--> 224\u001b[0m accessor_obj \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_accessor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    225\u001b[0m \u001b[38;5;66;03m# Replace the property with the accessor object. Inspired by:\u001b[39;00m\n\u001b[1;32m    226\u001b[0m \u001b[38;5;66;03m# https://www.pydanny.com/cached-property.html\u001b[39;00m\n\u001b[1;32m    227\u001b[0m \u001b[38;5;66;03m# We need to use object.__setattr__ because we overwrite __setattr__ on\u001b[39;00m\n\u001b[1;32m    228\u001b[0m \u001b[38;5;66;03m# NDFrame\u001b[39;00m\n\u001b[1;32m    229\u001b[0m \u001b[38;5;28mobject\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__setattr__\u001b[39m(obj, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_name, accessor_obj)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/strings/accessor.py:191\u001b[0m, in \u001b[0;36mStringMethods.__init__\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, data) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    189\u001b[0m     \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcore\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01marrays\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mstring_\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m StringDtype\n\u001b[0;32m--> 191\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_inferred_dtype \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    192\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_categorical \u001b[38;5;241m=\u001b[39m \u001b[38;5;28misinstance\u001b[39m(data\u001b[38;5;241m.\u001b[39mdtype, CategoricalDtype)\n\u001b[1;32m    193\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_is_string \u001b[38;5;241m=\u001b[39m \u001b[38;5;28misinstance\u001b[39m(data\u001b[38;5;241m.\u001b[39mdtype, StringDtype)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/strings/accessor.py:245\u001b[0m, in \u001b[0;36mStringMethods._validate\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    242\u001b[0m inferred_dtype \u001b[38;5;241m=\u001b[39m lib\u001b[38;5;241m.\u001b[39minfer_dtype(values, skipna\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m    244\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inferred_dtype \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m allowed_types:\n\u001b[0;32m--> 245\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCan only use .str accessor with string values!\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    246\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m inferred_dtype\n",
      "\u001b[0;31mAttributeError\u001b[0m: Can only use .str accessor with string values!"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "6a6ef8a3-e361-4f74-9f2d-48c5868213a5",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Length mismatch: Expected axis has 13 elements, new values have 9 elements",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[131], line 10\u001b[0m\n\u001b[1;32m      7\u001b[0m malData_expanded \u001b[38;5;241m=\u001b[39m malData\u001b[38;5;241m.\u001b[39miloc[:, \u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mstr\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m,\u001b[39m\u001b[38;5;124m'\u001b[39m, expand\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m# Assign column names based on the features present in the dataset\u001b[39;00m\n\u001b[0;32m---> 10\u001b[0m \u001b[43mmalData_expanded\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m     11\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAddressOfEntryPoint\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMajorLinkerVersion\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMajorImageVersion\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m     12\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMajorOperatingSystemVersion\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDllCharacteristics\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSizeOfStackReserve\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m     13\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mNumberOfSections\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mResourceSize\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlegitimate\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m     14\u001b[0m ]\n\u001b[1;32m     16\u001b[0m \u001b[38;5;66;03m# Concatenate the newly split columns with the remaining columns (Entropy, ImportCount, Packed, Timestamp)\u001b[39;00m\n\u001b[1;32m     17\u001b[0m malData \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mconcat([malData_expanded, malData[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mEntropy\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mImportCount\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPacked\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTimestamp\u001b[39m\u001b[38;5;124m'\u001b[39m]]], axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py:6313\u001b[0m, in \u001b[0;36mNDFrame.__setattr__\u001b[0;34m(self, name, value)\u001b[0m\n\u001b[1;32m   6311\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   6312\u001b[0m     \u001b[38;5;28mobject\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__getattribute__\u001b[39m(\u001b[38;5;28mself\u001b[39m, name)\n\u001b[0;32m-> 6313\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mobject\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__setattr__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6314\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m:\n\u001b[1;32m   6315\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n",
      "File \u001b[0;32mproperties.pyx:69\u001b[0m, in \u001b[0;36mpandas._libs.properties.AxisProperty.__set__\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py:814\u001b[0m, in \u001b[0;36mNDFrame._set_axis\u001b[0;34m(self, axis, labels)\u001b[0m\n\u001b[1;32m    809\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    810\u001b[0m \u001b[38;5;124;03mThis is called from the cython code when we set the `index` attribute\u001b[39;00m\n\u001b[1;32m    811\u001b[0m \u001b[38;5;124;03mdirectly, e.g. `series.index = [1, 2, 3]`.\u001b[39;00m\n\u001b[1;32m    812\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    813\u001b[0m labels \u001b[38;5;241m=\u001b[39m ensure_index(labels)\n\u001b[0;32m--> 814\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_mgr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mset_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    815\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_clear_item_cache()\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/internals/managers.py:238\u001b[0m, in \u001b[0;36mBaseBlockManager.set_axis\u001b[0;34m(self, axis, new_labels)\u001b[0m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mset_axis\u001b[39m(\u001b[38;5;28mself\u001b[39m, axis: AxisInt, new_labels: Index) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    237\u001b[0m     \u001b[38;5;66;03m# Caller is responsible for ensuring we have an Index object.\u001b[39;00m\n\u001b[0;32m--> 238\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_set_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnew_labels\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    239\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes[axis] \u001b[38;5;241m=\u001b[39m new_labels\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/internals/base.py:98\u001b[0m, in \u001b[0;36mDataManager._validate_set_axis\u001b[0;34m(self, axis, new_labels)\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[1;32m     97\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m new_len \u001b[38;5;241m!=\u001b[39m old_len:\n\u001b[0;32m---> 98\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m     99\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLength mismatch: Expected axis has \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mold_len\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m elements, new \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    100\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalues have \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnew_len\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m elements\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    101\u001b[0m     )\n",
      "\u001b[0;31mValueError\u001b[0m: Length mismatch: Expected axis has 13 elements, new values have 9 elements"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset as a single column without specifying any separator\n",
    "malData = pd.read_csv('MalwareData.csv', header=0, delimiter=None, engine='python')\n",
    "\n",
    "# Split the single column into separate columns based on commas\n",
    "malData_expanded = malData.iloc[:, 0].str.split(',', expand=True)\n",
    "\n",
    "# Check how many columns were created\n",
    "print(\"Number of columns after split:\", malData_expanded.shape[1])\n",
    "\n",
    "# Define the correct column names for all 13 columns\n",
    "column_names = [\n",
    "    'AddressOfEntryPoint', 'MajorLinkerVersion', 'MajorImageVersion',\n",
    "    'MajorOperatingSystemVersion', 'DllCharacteristics', 'SizeOfStackReserve',\n",
    "    'NumberOfSections', 'ResourceSize', 'legitimate', 'Entropy', 'ImportCount', \n",
    "    'Packed', 'Timestamp'\n",
    "]\n",
    "\n",
    "# Ensure malData_expanded has exactly 13 columns\n",
    "# If there are fewer than 13 columns, add empty columns\n",
    "if malData_expanded.shape[1] < 13:\n",
    "    for i in range(13 - malData_expanded.shape[1]):\n",
    "        malData_expanded[f'Extra{i}'] = None\n",
    "\n",
    "# Rename columns based on expected names\n",
    "malData_expanded.columns = column_names\n",
    "\n",
    "# Save the updated dataset back to the CSV file\n",
    "malData_expanded.to_csv('MalwareData.csv', index=False)\n",
    "\n",
    "# Display the first few rows to confirm the changes\n",
    "print(malData_expanded.head())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "44c9b599-9469-4479-9334-e1515b21d4fa",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['legitimate'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[130], line 11\u001b[0m\n\u001b[1;32m      8\u001b[0m malData \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMalwareData.csv\u001b[39m\u001b[38;5;124m'\u001b[39m, sep\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m,\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# Define the feature set and target variable\u001b[39;00m\n\u001b[0;32m---> 11\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mmalData\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlegitimate\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# Features, excluding the target column\u001b[39;00m\n\u001b[1;32m     12\u001b[0m y \u001b[38;5;241m=\u001b[39m malData[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlegitimate\u001b[39m\u001b[38;5;124m'\u001b[39m]               \u001b[38;5;66;03m# Target (1 for legitimate, 0 for malicious)\u001b[39;00m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# Split the dataset into training and testing sets\u001b[39;00m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/frame.py:5581\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5433\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(\n\u001b[1;32m   5434\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   5435\u001b[0m     labels: IndexLabel \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5442\u001b[0m     errors: IgnoreRaise \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   5443\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   5444\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   5445\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   5446\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5579\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   5580\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 5581\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   5582\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5583\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5584\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5585\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5586\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5587\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5588\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5589\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py:4788\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   4787\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 4788\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4790\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   4791\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py:4830\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4829\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4830\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4831\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[1;32m   4833\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   4834\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/indexes/base.py:7070\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   7069\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 7070\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlabels[mask]\u001b[38;5;241m.\u001b[39mtolist()\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   7071\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   7072\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['legitimate'] not found in axis\""
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "import joblib\n",
    "\n",
    "# Load the dataset with comma as the separator\n",
    "malData = pd.read_csv('MalwareData.csv', sep=\",\")\n",
    "\n",
    "# Define the feature set and target variable\n",
    "X = malData.drop('legitimate', axis=1)  # Features, excluding the target column\n",
    "y = malData['legitimate']               # Target (1 for legitimate, 0 for malicious)\n",
    "\n",
    "# Split the dataset into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train the RandomForestClassifier with class weights\n",
    "rf_model = RandomForestClassifier(class_weight={0: 1, 1: 2}, random_state=42)\n",
    "rf_model.fit(X_train, y_train)\n",
    "\n",
    "# Save the trained model\n",
    "joblib.dump(rf_model, '/Users/carterlange/Desktop/ML-Senior-Project/MLProject.pkl')\n",
    "\n",
    "# Optionally, evaluate the model\n",
    "score = rf_model.score(X_test, y_test)\n",
    "print(f\"Model accuracy: {score * 100:.2f}%\")\n",
    "\n",
    "column_names = [\n",
    "    'AddressOfEntryPoint', 'MajorLinkerVersion', 'MajorImageVersion',\n",
    "    'MajorOperatingSystemVersion', 'DllCharacteristics', 'SizeOfStackReserve',\n",
    "    'NumberOfSections', 'ResourceSize', 'legitimate', 'Entropy', 'ImportCount', \n",
    "    'Packed', 'Timestamp'\n",
    "]\n",
    "\n",
    "# Load the CSV with explicit column names\n",
    "malData = pd.read_csv('MalwareData.csv', sep=\"|\")\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "dbe28aa8-7520-4a53-819a-4c329bd0892b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Columns: Index(['AddressOfEntryPoint,MajorLinkerVersion,MajorImageVersion,MajorOperatingSystemVersion,DllCharacteristics,SizeOfStackReserve,NumberOfSections,ResourceSize,legitimate,Entropy,ImportCount,Packed,Timestamp'], dtype='object')\n",
      "First few rows of the dataset:\n",
      "  AddressOfEntryPoint,MajorLinkerVersion,MajorImageVersion,MajorOperatingSystemVersion,DllCharacteristics,SizeOfStackReserve,NumberOfSections,ResourceSize,legitimate,Entropy,ImportCount,Packed,Timestamp\n",
      "0  10407,9,6,6,33088,262144,4,952,1,5.49816047538...                                                                                                                                                      \n",
      "1  5354,9,6,6,33088,262144,4,952,1,7.802857225639...                                                                                                                                                      \n",
      "2  58807,9,6,6,33088,262144,4,136490,1,6.92797576...                                                                                                                                                      \n",
      "3  25166,9,6,6,33088,262144,4,1940,1,6.3946339367...                                                                                                                                                      \n",
      "4  70387,9,6,6,33088,262144,4,83098,1,4.624074561...                                                                                                                                                      \n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'legitimate'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[0;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mindex.pyx:196\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:7081\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:7089\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'legitimate'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[125], line 16\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# Prepare the data\u001b[39;00m\n\u001b[1;32m     15\u001b[0m X \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mdrop([\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlegitimate\u001b[39m\u001b[38;5;124m'\u001b[39m], axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m, errors\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m---> 16\u001b[0m y \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlegitimate\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;66;03m# Convert categorical features to numerical if necessary\u001b[39;00m\n\u001b[1;32m     19\u001b[0m X \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mget_dummies(X)  \u001b[38;5;66;03m# This converts categorical columns to dummy/indicator variables\u001b[39;00m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/frame.py:4102\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   4101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 4102\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4103\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   4104\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3810\u001b[0m     ):\n\u001b[1;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[0;31mKeyError\u001b[0m: 'legitimate'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "import numpy as np #library used for working with arrays\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv('MalwareData.csv')\n",
    "\n",
    "# Display the first few rows and column names to understand the data\n",
    "print(\"Dataset Columns:\", df.columns)\n",
    "print(\"First few rows of the dataset:\")\n",
    "print(df.head())\n",
    "\n",
    "# Prepare the data\n",
    "X = df.drop(['legitimate'], axis=1, errors='ignore')\n",
    "y = df['legitimate']\n",
    "\n",
    "# Convert categorical features to numerical if necessary\n",
    "X = pd.get_dummies(X)  # This converts categorical columns to dummy/indicator variables\n",
    "\n",
    "# Initialize and fit the model\n",
    "extratrees = ExtraTreesClassifier() # extremely randomized tree classifier\n",
    "extratrees.fit(X, y)\n",
    "\n",
    "# Perform feature selection with a low threshold to include all features\n",
    "select = SelectFromModel(extratrees, threshold=-np.inf, prefit=True) # -nf = negative infinity\n",
    "X_new = select.transform(X)\n",
    "\n",
    "# Use DataFrame for the transformed data to retain feature names, makes rows and columns\n",
    "X_new = pd.DataFrame(X_new, columns=X.columns[select.get_support()]) #creates new dataframe (tabular data structure) for the important features\n",
    "\n",
    "# Print the shape of the original and transformed data\n",
    "print(\"Shape of X:\", X.shape)\n",
    "print(\"Shape of X_new:\", X_new.shape)\n",
    "\n",
    "# Access feature importances\n",
    "importances = extratrees.feature_importances_\n",
    "indices = np.argsort(importances)[::-1]\n",
    "\n",
    "for i in range(len(importances)):\n",
    "    print(f\"{X.columns[i]}: {importances[i]:.4f}\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "eecfa53a-65c7-4fe6-9742-3606fb41691f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The score of the algorithm:  96.44948888646367\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# Split the data into training and test sets\n",
    "data_train, data_test, labels_train, labels_test = train_test_split(data_in_new, labels, test_size=0.2)\n",
    "\n",
    "# Initialize the RandomForestClassifier\n",
    "classif = RandomForestClassifier(n_estimators = 500)\n",
    "\n",
    "# Fit the classifier with the training data\n",
    "classif.fit(data_train, labels_train)\n",
    "\n",
    "print(\"The score of the algorithm: \", classif.score(data_test,labels_test)*100) #prints the accuracy of the RandomForest Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "108301db-a0f8-4170-b2a4-5b4e3f54dff6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pefile\n",
    "import math\n",
    "\n",
    "# Load original dataset\n",
    "malData = pd.read_csv('MalwareData.csv', sep=\"|\")\n",
    "\n",
    "# Function to calculate entropy\n",
    "def calculate_entropy(data):\n",
    "    if len(data) == 0:\n",
    "        return 0.0\n",
    "    entropy = 0\n",
    "    for x in range(256):\n",
    "        p_x = data.count(chr(x)) / len(data)\n",
    "        if p_x > 0:\n",
    "            entropy += - p_x * math.log2(p_x)\n",
    "    return entropy\n",
    "\n",
    "# Define additional features\n",
    "def extract_additional_features(filepath):\n",
    "    try:\n",
    "        pe = pefile.PE(filepath)\n",
    "        features = {}\n",
    "        \n",
    "        # Entropy for each section\n",
    "        features['Entropy'] = np.mean([calculate_entropy(str(section.get_data())) for section in pe.sections])\n",
    "        \n",
    "        # API imports count (indicative of functionality)\n",
    "        features['ImportCount'] = len(pe.DIRECTORY_ENTRY_IMPORT) if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else 0\n",
    "        \n",
    "        # Packed or compressed flag (detecting unusual characteristics)\n",
    "        features['Packed'] = int(features['Entropy'] > 7)  # High entropy suggests packing\n",
    "        \n",
    "        # Add timestamp features if available\n",
    "        features['Timestamp'] = pe.FILE_HEADER.TimeDateStamp if hasattr(pe.FILE_HEADER, 'TimeDateStamp') else 0\n",
    "        \n",
    "        return features\n",
    "    except pefile.PEFormatError:\n",
    "        return {\"Entropy\": 0, \"ImportCount\": 0, \"Packed\": 0, \"Timestamp\": 0}\n",
    "\n",
    "# Apply to each file if you have access to the actual executable files\n",
    "# malData = malData.assign(**malData['FilePath'].apply(extract_additional_features))\n",
    "\n",
    "# Example feature integration (adding as new columns)\n",
    "# malData['Entropy'], malData['ImportCount'], malData['Packed'], malData['Timestamp'] = zip(*malData['FilePath'].apply(extract_additional_features))\n",
    "\n",
    "malData.head()  # Display updated dataset\n",
    "# Save the updated dataset with each feature in its own column\n",
    "malData.to_csv('MalwareData.csv', sep=\",\", index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bab1efca-3f6d-4314-9fec-69c32f158069",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Load original dataset\n",
    "malData = pd.read_csv('MalwareData.csv', sep=\"|\")\n",
    "\n",
    "# Mock feature values for demonstration\n",
    "# Add columns with random values to simulate additional feature extraction\n",
    "np.random.seed(42)  # For reproducibility\n",
    "\n",
    "# Add new columns to the dataset with simulated values\n",
    "malData['Entropy'] = np.random.uniform(4, 8, size=len(malData))  # Simulating entropy between 4 and 8\n",
    "malData['ImportCount'] = np.random.randint(10, 100, size=len(malData))  # Random import count\n",
    "malData['Packed'] = np.random.choice([0, 1], size=len(malData))  # 0 or 1 to indicate packed\n",
    "malData['Timestamp'] = np.random.randint(1609459200, 1640995200, size=len(malData))  # Random timestamp within 2021\n",
    "\n",
    "# Check the updated dataset\n",
    "malData.head()\n",
    "# Save the updated dataset, overwriting the original file\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d915cf06-1483-4af6-a009-041f17a8e6ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "result = classif.predict(data_test) #makes predictions based on the test data\n",
    "conf_mat = confusion_matrix(labels_test,result) #compares labels_test with the predicted lables(result)\n",
    "\n",
    "# table that compares predicted values to actual values to evaluate the performance of a classification algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b0195356-7866-4028-ae7b-38b2b25e26c6",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'false_negatives' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[15], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mfalse_negatives\u001b[49m \n",
      "\u001b[0;31mNameError\u001b[0m: name 'false_negatives' is not defined"
     ]
    }
   ],
   "source": [
    "false_negatives "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "056f9656-ff4c-4231-9417-af8f763f34c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['AddressOfEntryPoint' 'MajorLinkerVersion' 'MajorImageVersion'\n",
      " 'MajorOperatingSystemVersion' 'DllCharacteristics' 'SizeOfStackReserve'\n",
      " 'NumberOfSections' 'ResourceSize' 'Entropy' 'ImportCount' 'Packed'\n",
      " 'Timestamp']\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "# Load your trained model\n",
    "model = joblib.load('/Users/carterlange/Desktop/ML-Senior-Project/MLProject.pkl')\n",
    "\n",
    "# Print the feature names the model was trained on (this assumes it's a model like RandomForest)\n",
    "try:\n",
    "    print(model.feature_names_in_)\n",
    "except AttributeError:\n",
    "    print(\"The model does not have 'feature_names_in_' attribute. Please ensure your model was trained with feature names.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c6c3cb6-3587-4c99-b7f4-2bc29606f478",
   "metadata": {},
   "outputs": [],
   "source": [
    "# data_test is the legit (non malicious files)\n",
    "# labels_result is the malicious files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e0692a48-8e76-4d0e-9480-c3e56dc3a311",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "result = classif.predict(data_test)\n",
    "conf_mat = confusion_matrix(labels_test,result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "254c8eed-59ed-4e0c-8fff-39a39656b1fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 2)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conf_mat.shape #binary classification problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9550b66e-2d0c-439f-bc5b-bc4575695c21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(conf_mat) #will be an instance of the array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3c3f808b-589e-4bbc-9cba-b24a60172e40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[19121,   133],\n",
       "       [  923,  7312]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conf_mat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d81d2ba-4e8f-4b62-acb0-1dabf8a66c7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "''' array ( [a], [b]\n",
    "            [c], [d] )      =====> [a] = true positives\n",
    "                            =====> [b] = false positives  \n",
    "                            =====> [c] = false negatives\n",
    "                            =====> [d] = true negatives\n",
    "'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "3c966e71-bb51-45fb-b236-fe09fbdfbb8a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False positives:  0.5827746260959258\n",
      "False negatives:  29.33695517965181\n"
     ]
    }
   ],
   "source": [
    "print(\"False positives: \",conf_mat[0][1]/sum(conf_mat[0])*100)\n",
    "print(\"False negatives: \",conf_mat[1][0]/sum(conf_mat[1])*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "46169017-78f6-41bc-af49-44a84c80d0ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-5 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-5 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-5 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-5 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-5 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingClassifier(n_estimators=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GradientBoostingClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html\">?<span>Documentation for GradientBoostingClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GradientBoostingClassifier(n_estimators=50)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "GradientBoostingClassifier(n_estimators=50)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier # builds multiple decision trees, where each tree corrects other trees, aka GradientBoosting\n",
    "\n",
    "grad_boost = GradientBoostingClassifier(n_estimators=50) # will consists of 50 decision trees\n",
    "grad_boost.fit(data_train,labels_train) #training the model to make predictions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a110c1d5-0013-434b-8a03-dc36c7209cc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# n_estimators are the number of trees in RandomForest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "8b39f7ea-f87d-472d-b526-3f6d4265cf19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The score of the GradientBoostingClassifier is:  96.15482556659028\n"
     ]
    }
   ],
   "source": [
    "print(\"The score of the GradientBoostingClassifier is: \",grad_boost.score(data_test,labels_test)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96486e12-2ceb-4238-ae6f-e561bcb20227",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7117f66d-d348-4ee4-9f10-5c599dea71dc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f6134b1-08a6-4c92-809e-9cb061e5a80c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47ef261d-13bd-4d01-b506-f3851d585c07",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb16cd98-c9f5-4002-abb4-045dc7eb4e93",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a88e7a64-b44f-45ec-9841-9a65bc4aaaca",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75cc552f-82c5-4bbf-a42d-d3a1ff8183b5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48d7078d-c02b-400e-bf0b-a2973c1f03ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# KNN (K-Nearest-Neighbors Algorithm) tries to predict the correct class for the test data by calculating the distance between the test data and all the training points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "7e3d5347-1956-47bd-8996-9f82e5963e56",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('MalwareData.csv') #reads the MalwareData set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "7ba988b5-02d0-4416-b819-9551fe417858",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['legitimate'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[115], line 13\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# Load the dataset\u001b[39;00m\n\u001b[1;32m     12\u001b[0m data \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMalwareData.csv\u001b[39m\u001b[38;5;124m'\u001b[39m)  \u001b[38;5;66;03m# Reads the Dataset\u001b[39;00m\n\u001b[0;32m---> 13\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlegitimate\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# Column in the dataset that we are choosing to indiviually assess\u001b[39;00m\n\u001b[1;32m     14\u001b[0m y \u001b[38;5;241m=\u001b[39m data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlegitimate\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m     17\u001b[0m scaler \u001b[38;5;241m=\u001b[39m StandardScaler()\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/frame.py:5581\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5433\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(\n\u001b[1;32m   5434\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   5435\u001b[0m     labels: IndexLabel \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5442\u001b[0m     errors: IgnoreRaise \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   5443\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   5444\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   5445\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   5446\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5579\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   5580\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 5581\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   5582\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5583\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5584\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5585\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5586\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5587\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5588\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5589\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py:4788\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   4787\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 4788\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4790\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   4791\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py:4830\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4829\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4830\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4831\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[1;32m   4833\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   4834\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/indexes/base.py:7070\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   7069\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 7070\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlabels[mask]\u001b[38;5;241m.\u001b[39mtolist()\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   7071\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   7072\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['legitimate'] not found in axis\""
     ]
    }
   ],
   "source": [
    "#Cross Validation: Technique used to assess how well a machine learning model can generalize to an independent column of the dataset\n",
    "#Example: legitimate, which is a column in our dataset\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split, KFold, cross_val_score\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, roc_curve, RocCurveDisplay, f1_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv('MalwareData.csv')  # Reads the Dataset\n",
    "X = data.drop('legitimate', axis=1)  # Column in the dataset that we are choosing to indiviually assess\n",
    "y = data['legitimate']\n",
    "\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "# Split the dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# Initialize and train the KNN model\n",
    "knModel = KNeighborsClassifier(n_neighbors=3)  # Example k value, you might want to optimize this\n",
    "knModel.fit(X_train, y_train)\n",
    "\n",
    "# Get predictions\n",
    "y_pred = knModel.predict(X_test)\n",
    "\n",
    "# Calculate confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "display = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "display.plot()\n",
    "plt.title(\"Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "# Print classification report\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Compute ROC curve\n",
    "y_score = knModel.predict_proba(X_test)[:, 1]  # Get the probability estimates for the positive class\n",
    "fpr, tpr, _ = roc_curve(y_test, y_score)\n",
    "\n",
    "# Plot the ROC curve\n",
    "roc_display = RocCurveDisplay(fpr=fpr, tpr=tpr)\n",
    "roc_display.plot()\n",
    "plt.title(\"ROC Curve\")\n",
    "plt.show()\n",
    "\n",
    "# Cross-validation\n",
    "kf = KFold(n_splits=5, shuffle=True, random_state=42) #splits into 5 folds, data shuffled before splitting, and seed to make it reproducible\n",
    "cv_scores = cross_val_score(knModel, X_scaled, y, cv=kf) #Uses CV on KNN model\n",
    "print(f\"Cross-validated scores: {cv_scores}\") #prints and scores of cv for each fold\n",
    "print(f\"Mean CV Score: {np.mean(cv_scores)}\") \n",
    "\n",
    "\n",
    "#ROC curve: a graph that shows how well a model performs across different thresholds\n",
    "\n",
    "#from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "#cm = confusion_matrix(y_true, y_pred)\n",
    "#disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "#disp.plot()\n",
    "\n",
    "# from sklearn.metrics import plot_confusion_matrix,plot_precision_recall_curve,plot_roc_curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "45662351-d0fa-49bd-bfc1-cddb104f886e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('MalwareData.csv') #read the dataset file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cdbbc8a8-5c1e-4387-bbb2-de54223288ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AddressOfEntryPoint</th>\n",
       "      <th>MajorLinkerVersion</th>\n",
       "      <th>MajorImageVersion</th>\n",
       "      <th>MajorOperatingSystemVersion</th>\n",
       "      <th>DllCharacteristics</th>\n",
       "      <th>SizeOfStackReserve</th>\n",
       "      <th>NumberOfSections</th>\n",
       "      <th>ResourceSize</th>\n",
       "      <th>legitimate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10407</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>33088</td>\n",
       "      <td>262144</td>\n",
       "      <td>4</td>\n",
       "      <td>952</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5354</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>33088</td>\n",
       "      <td>262144</td>\n",
       "      <td>4</td>\n",
       "      <td>952</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>58807</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>33088</td>\n",
       "      <td>262144</td>\n",
       "      <td>4</td>\n",
       "      <td>136490</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25166</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>33088</td>\n",
       "      <td>262144</td>\n",
       "      <td>4</td>\n",
       "      <td>1940</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>70387</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>33088</td>\n",
       "      <td>262144</td>\n",
       "      <td>4</td>\n",
       "      <td>83098</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137439</th>\n",
       "      <td>123291</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>33088</td>\n",
       "      <td>1048576</td>\n",
       "      <td>5</td>\n",
       "      <td>81654</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137440</th>\n",
       "      <td>40000</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>32768</td>\n",
       "      <td>1048576</td>\n",
       "      <td>8</td>\n",
       "      <td>67624</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137441</th>\n",
       "      <td>59610</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>33088</td>\n",
       "      <td>1048576</td>\n",
       "      <td>5</td>\n",
       "      <td>22648</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137442</th>\n",
       "      <td>51216</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1048576</td>\n",
       "      <td>8</td>\n",
       "      <td>2216</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137443</th>\n",
       "      <td>22731</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>33088</td>\n",
       "      <td>1048576</td>\n",
       "      <td>5</td>\n",
       "      <td>318464</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>137444 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        AddressOfEntryPoint  MajorLinkerVersion  MajorImageVersion  \\\n",
       "0                     10407                   9                  6   \n",
       "1                      5354                   9                  6   \n",
       "2                     58807                   9                  6   \n",
       "3                     25166                   9                  6   \n",
       "4                     70387                   9                  6   \n",
       "...                     ...                 ...                ...   \n",
       "137439               123291                  11                  0   \n",
       "137440                40000                   2                  6   \n",
       "137441                59610                  10                  0   \n",
       "137442                51216                   2                  0   \n",
       "137443                22731                  11                  0   \n",
       "\n",
       "        MajorOperatingSystemVersion  DllCharacteristics  SizeOfStackReserve  \\\n",
       "0                                 6               33088              262144   \n",
       "1                                 6               33088              262144   \n",
       "2                                 6               33088              262144   \n",
       "3                                 6               33088              262144   \n",
       "4                                 6               33088              262144   \n",
       "...                             ...                 ...                 ...   \n",
       "137439                            5               33088             1048576   \n",
       "137440                            1               32768             1048576   \n",
       "137441                            5               33088             1048576   \n",
       "137442                            1                   0             1048576   \n",
       "137443                            5               33088             1048576   \n",
       "\n",
       "        NumberOfSections  ResourceSize  legitimate  \n",
       "0                      4           952           1  \n",
       "1                      4           952           1  \n",
       "2                      4        136490           1  \n",
       "3                      4          1940           1  \n",
       "4                      4         83098           1  \n",
       "...                  ...           ...         ...  \n",
       "137439                 5         81654           0  \n",
       "137440                 8         67624           0  \n",
       "137441                 5         22648           0  \n",
       "137442                 8          2216           0  \n",
       "137443                 5        318464           0  \n",
       "\n",
       "[137444 rows x 9 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df #prints data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3e7d0a2b-7c67-44f1-9bbd-1abf636202d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(137444, 9)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape #this means the dataset has 137444 rows by 9 columns"
   ]
  },
  {
   "cell_type": "raw",
   "id": "277c0442-72ff-4ca2-9a57-e7b82c554e59",
   "metadata": {},
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9d6b07d3-b197-4108-866d-dd459b9eee25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "legitimate\n",
       "0    96526\n",
       "1    40918\n",
       "dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(df['legitimate']).size() #0 stands for true, 1 stands for false"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "77224dbd-ff23-45a7-ae5d-ab386c45159d",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = df.iloc[:,[0,1,2,3,4,5,6,7]].values \n",
    "\n",
    "# extracting the first 8 columns from the dataset - features\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b202efcc-5091-478d-8e8f-2d7cd55588c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  10407,       9,       6, ...,  262144,       4,     952],\n",
       "       [   5354,       9,       6, ...,  262144,       4,     952],\n",
       "       [  58807,       9,       6, ...,  262144,       4,  136490],\n",
       "       ...,\n",
       "       [  59610,      10,       0, ..., 1048576,       5,   22648],\n",
       "       [  51216,       2,       0, ..., 1048576,       8,    2216],\n",
       "       [  22731,      11,       0, ..., 1048576,       5,  318464]])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c2755564-e24e-452e-b359-1545b2128ba1",
   "metadata": {},
   "outputs": [],
   "source": [
    "ifMalware = df.iloc[:,8].values \n",
    "\n",
    "# extracting the legitimate column of the dataset - safe & malware results, the last column of our dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5269d118-625b-473c-ab93-8eb40db319b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, ..., 0, 0, 0])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ifMalware\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "bbeabe46-8a99-4212-8d55-f9bf0c80fc6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "features_train, features_test, ifMalware_train, ifMalware_test = train_test_split(features, ifMalware, test_size=0.25)\n",
    "# Tests features on 25% of the dataset, Trains the other 75%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "4004e0de-4424-43c8-acaf-dafa7df427c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "knModel = KNeighborsClassifier(n_neighbors=1) \n",
    "\n",
    "# Defined the model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "51d58c8e-6939-4d39-8fb2-738ecaf6fb36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(n_neighbors=1)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=1)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knModel.fit(features_train, ifMalware_train) \n",
    "\n",
    "# Provided training data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "06c51eb1-591e-41f5-93fe-af450bccd45f",
   "metadata": {},
   "outputs": [],
   "source": [
    "knPredict = knModel.predict(features_test) \n",
    "\n",
    "# Give the test data then call predict.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5c49817f-f827-4cf9-aed2-8e83f9d4bdbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of mislabeled out of a total of 34361 test entries: 10255\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of mislabeled out of a total of %d test entries: %d\" % (features_test.shape[0], \n",
    "                                                                      (ifMalware_test != knPredict).sum())) #prints out test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8a7a59ee-ff21-4cf2-897b-fd037028cef6",
   "metadata": {},
   "outputs": [],
   "source": [
    "successRate = 100 * f1_score(ifMalware_test, knPredict, average='micro') # Success rate calculation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "31cde76b-2e5e-4b1c-ad07-041aaf53d19c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Success Rate was calculated as % : 70.15511772067168 with the K-Nearest-Neighbors\n"
     ]
    }
   ],
   "source": [
    "print(\"The Success Rate was calculated as % : \" + str(successRate) + \" with the K-Nearest-Neighbors\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "ceb9958a-31fc-4a75-9498-27e34bd67fb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load your dataset\n",
    "data = pd.read_csv('MalwareData.csv')  \n",
    "X = data.drop('legitimate', axis=1)  \n",
    "y = data['legitimate']\n",
    "\n",
    "# Example synthetic data for demonstration (remove this when using your actual data)\n",
    "from sklearn.datasets import make_classification\n",
    "X, y = make_classification(n_samples=100, n_features=20, n_classes=2, random_state=42)\n",
    "\n",
    "# Split the dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train the KNN model\n",
    "knModel = KNeighborsClassifier(n_neighbors=1)\n",
    "knModel.fit(X_train, y_train)\n",
    "\n",
    "# Get predictions\n",
    "y_pred = knModel.predict(X_test)\n",
    "\n",
    "# Calculate confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Create and display the confusion matrix\n",
    "display = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "display.plot()\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c862df1e-715e-43f8-b1e0-16154d6695f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAArMAAAIjCAYAAAAQgZNYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABiJUlEQVR4nO3deXhU5f3+8XtmMpns+0oIZGGTHQKEgIgomygttlbrilqpG79aqbXQqpTaSq1WUYtg/YrYagtutVoURBAVCPsiyJ4EAoGELGQhIeuc3x+BqWkSTEKSyYH367py4Zw5Z87nyYfA7eE5z7EYhmEIAAAAMCGruwsAAAAAWoowCwAAANMizAIAAMC0CLMAAAAwLcIsAAAATIswCwAAANMizAIAAMC0CLMAAAAwLcIsAAAATIswC+CSceeddyouLq5Zx6xZs0YWi0Vr1qxpk5rM7sorr9SVV17pen348GFZLBYtXrzYbTUBuLQQZgG0mcWLF8tisbi+vLy81KNHD02fPl05OTnuLq/DOxcMz31ZrVaFhITommuuUWpqqrvLaxU5OTl65JFH1KtXL/n4+MjX11dJSUn6/e9/r8LCQneXB8AEPNxdAICL3+9+9zvFx8ervLxca9eu1YIFC/Txxx9r9+7d8vHxabc6Xn31VTmdzmYdc8UVV+jMmTPy9PRso6q+280336xJkyappqZGBw4c0Msvv6wxY8Zo8+bN6tevn9vqulCbN2/WpEmTdPr0ad12221KSkqSJG3ZskV//OMf9eWXX+rTTz91c5UAOjrCLIA2d80112jIkCGSpHvuuUehoaF67rnn9O9//1s333xzg8eUlpbK19e3Veuw2+3NPsZqtcrLy6tV62iuwYMH67bbbnO9HjVqlK655hotWLBAL7/8shsra7nCwkJdf/31stls2r59u3r16lXn/T/84Q969dVXW+VcbfF7CUDHwTQDAO3uqquukiRlZGRIqp3L6ufnp7S0NE2aNEn+/v669dZbJUlOp1Pz5s1Tnz595OXlpcjISN177706depUvc/95JNPNHr0aPn7+ysgIEBDhw7VP/7xD9f7Dc2ZXbJkiZKSklzH9OvXTy+88ILr/cbmzL7zzjtKSkqSt7e3wsLCdNtttykrK6vOPufGlZWVpSlTpsjPz0/h4eF65JFHVFNT0+Lv36hRoyRJaWlpdbYXFhbq5z//uWJjY+VwONStWzc9/fTT9a5GO51OvfDCC+rXr5+8vLwUHh6uiRMnasuWLa59Xn/9dV111VWKiIiQw+FQ7969tWDBghbX/L9eeeUVZWVl6bnnnqsXZCUpMjJSjz32mOu1xWLRb3/723r7xcXF6c4773S9Pje15YsvvtADDzygiIgIde7cWe+++65re0O1WCwW7d6927Vt3759uuGGGxQSEiIvLy8NGTJEH3744YUNGkCb4MosgHZ3LoSFhoa6tlVXV2vChAm6/PLL9eyzz7qmH9x7771avHix7rrrLv3sZz9TRkaG/vKXv2j79u1at26d62rr4sWLdffdd6tPnz6aNWuWgoKCtH37di1fvly33HJLg3WsXLlSN998s66++mo9/fTTkqS9e/dq3bp1euihhxqt/1w9Q4cO1dy5c5WTk6MXXnhB69at0/bt2xUUFOTat6amRhMmTFBycrKeffZZffbZZ/rzn/+sxMRE3X///S36/h0+fFiSFBwc7NpWVlam0aNHKysrS/fee6+6dOmi9evXa9asWTpx4oTmzZvn2vcnP/mJFi9erGuuuUb33HOPqqur9dVXX2nDhg2uK+gLFixQnz599L3vfU8eHh766KOP9MADD8jpdOrBBx9sUd3f9uGHH8rb21s33HDDBX9WQx544AGFh4friSeeUGlpqa699lr5+fnp7bff1ujRo+vsu3TpUvXp00d9+/aVJH3zzTcaOXKkYmJiNHPmTPn6+urtt9/WlClT9N577+n6669vk5oBtJABAG3k9ddfNyQZn332mZGbm2scPXrUWLJkiREaGmp4e3sbx44dMwzDMKZOnWpIMmbOnFnn+K+++sqQZLz11lt1ti9fvrzO9sLCQsPf399ITk42zpw5U2dfp9Pp+u+pU6caXbt2db1+6KGHjICAAKO6urrRMXz++eeGJOPzzz83DMMwKisrjYiICKNv3751zvWf//zHkGQ88cQTdc4nyfjd735X5zMHDRpkJCUlNXrOczIyMgxJxpw5c4zc3FwjOzvb+Oqrr4yhQ4cakox33nnHte+TTz5p+Pr6GgcOHKjzGTNnzjRsNpuRmZlpGIZhrF692pBk/OxnP6t3vm9/r8rKyuq9P2HCBCMhIaHOttGjRxujR4+uV/Prr79+3rEFBwcbAwYMOO8+3ybJmD17dr3tXbt2NaZOnep6fe733OWXX16vrzfffLMRERFRZ/uJEycMq9Vap0dXX3210a9fP6O8vNy1zel0GiNGjDC6d+/e5JoBtA+mGQBoc2PHjlV4eLhiY2P14x//WH5+fvrXv/6lmJiYOvv975XKd955R4GBgRo3bpzy8vJcX0lJSfLz89Pnn38uqfYKa0lJiWbOnFlvfqvFYmm0rqCgIJWWlmrlypVNHsuWLVt08uRJPfDAA3XOde2116pXr15atmxZvWPuu+++Oq9HjRql9PT0Jp9z9uzZCg8PV1RUlEaNGqW9e/fqz3/+c52rmu+8845GjRql4ODgOt+rsWPHqqamRl9++aUk6b333pPFYtHs2bPrnefb3ytvb2/XfxcVFSkvL0+jR49Wenq6ioqKmlx7Y4qLi+Xv73/Bn9OYadOmyWaz1dl200036eTJk3WmjLz77rtyOp266aabJEkFBQVavXq1brzxRpWUlLi+j/n5+ZowYYIOHjxYbzoJAPdimgGANjd//nz16NFDHh4eioyMVM+ePWW11v1/aQ8PD3Xu3LnOtoMHD6qoqEgRERENfu7Jkycl/Xfawrl/Jm6qBx54QG+//bauueYaxcTEaPz48brxxhs1ceLERo85cuSIJKlnz5713uvVq5fWrl1bZ9u5OanfFhwcXGfOb25ubp05tH5+fvLz83O9/ulPf6of/ehHKi8v1+rVq/Xiiy/Wm3N78OBBff311/XOdc63v1edOnVSSEhIo2OUpHXr1mn27NlKTU1VWVlZnfeKiooUGBh43uO/S0BAgEpKSi7oM84nPj6+3raJEycqMDBQS5cu1dVXXy2pdorBwIED1aNHD0nSoUOHZBiGHn/8cT3++OMNfvbJkyfr/Y8YAPchzAJoc8OGDXPNxWyMw+GoF3CdTqciIiL01ltvNXhMY8GtqSIiIrRjxw6tWLFCn3zyiT755BO9/vrruuOOO/TGG29c0Gef879XBxsydOhQV0iWaq/Efvtmp+7du2vs2LGSpOuuu042m00zZ87UmDFjXN9Xp9OpcePG6dFHH23wHOfCWlOkpaXp6quvVq9evfTcc88pNjZWnp6e+vjjj/X88883e3mzhvTq1Us7duxQZWXlBS171tiNdN++snyOw+HQlClT9K9//Usvv/yycnJytG7dOj311FOufc6N7ZFHHtGECRMa/Oxu3bq1uF4ArY8wC6DDSkxM1GeffaaRI0c2GE6+vZ8k7d69u9lBw9PTU5MnT9bkyZPldDr1wAMP6JVXXtHjjz/e4Gd17dpVkrR//37Xqgzn7N+/3/V+c7z11ls6c+aM63VCQsJ59//Nb36jV199VY899piWL18uqfZ7cPr0aVfobUxiYqJWrFihgoKCRq/OfvTRR6qoqNCHH36oLl26uLafm9bRGiZPnqzU1FS99957jS7P9m3BwcH1HqJQWVmpEydONOu8N910k9544w2tWrVKe/fulWEYrikG0n+/93a7/Tu/lwA6BubMAuiwbrzxRtXU1OjJJ5+s9151dbUr3IwfP17+/v6aO3euysvL6+xnGEajn5+fn1/ntdVqVf/+/SVJFRUVDR4zZMgQRUREaOHChXX2+eSTT7R3715de+21TRrbt40cOVJjx451fX1XmA0KCtK9996rFStWaMeOHZJqv1epqalasWJFvf0LCwtVXV0tSfrhD38owzA0Z86cevud+16du5r87e9dUVGRXn/99WaPrTH33XefoqOj9Ytf/EIHDhyo9/7Jkyf1+9//3vU6MTHRNe/3nL/+9a/NXuJs7NixCgkJ0dKlS7V06VINGzaszpSEiIgIXXnllXrllVcaDMq5ubnNOh+AtseVWQAd1ujRo3Xvvfdq7ty52rFjh8aPHy+73a6DBw/qnXfe0QsvvKAbbrhBAQEBev7553XPPfdo6NChuuWWWxQcHKydO3eqrKys0SkD99xzjwoKCnTVVVepc+fOOnLkiF566SUNHDhQl112WYPH2O12Pf3007rrrrs0evRo3Xzzza6lueLi4vTwww+35bfE5aGHHtK8efP0xz/+UUuWLNEvf/lLffjhh7ruuut05513KikpSaWlpdq1a5feffddHT58WGFhYRozZoxuv/12vfjiizp48KAmTpwop9Opr776SmPGjNH06dM1fvx41xXre++9V6dPn9arr76qiIiIZl8JbUxwcLD+9a9/adKkSRo4cGCdJ4Bt27ZN//znP5WSkuLa/5577tF9992nH/7whxo3bpx27typFStWKCwsrFnntdvt+sEPfqAlS5aotLRUzz77bL195s+fr8svv1z9+vXTtGnTlJCQoJycHKWmpurYsWPauXPnhQ0eQOty51IKAC5u55ZJ2rx583n3mzp1quHr69vo+3/961+NpKQkw9vb2/D39zf69etnPPro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KCkp0e23365XX31VYWFh7i4HLeR0OhUREaG//vWvSkpK0k033aTf/OY3WrhwobtLQxOsWbNGTz31lF5++WVt27ZN77//vpYtW6Ynn3zS3aXBhLgyewHCwsJks9mUk5NTZ3tOTo6ioqIaPCYqKqpZ+6NttaSH5zz77LP64x//qM8++0z9+/dvyzJxHs3tYVpamg4fPqzJkye7tjmdTkmSh4eH9u/fr8TExLYtGnW05OcwOjpadrtdNpvNte2yyy5Tdna2Kisr5enp2aY1479a0r/HH39ct99+u+655x5JUr9+/VRaWqqf/vSn+s1vfiOrlWttHV1jeSYgIKBdr8pKXJm9IJ6enkpKStKqVatc25xOp1atWqWUlJQGj0lJSamzvyStXLmy0f3RtlrSQ0n605/+pCeffFLLly/XkCFD2qNUNKK5PezVq5d27dqlHTt2uL6+973vacyYMdqxY4diY2Pbs3yoZT+HI0eO1KFDh1z/IyJJBw4cUHR0NEG2nbWkf2VlZfUC67n/MTEMo+2KRavpUHmm3W85u8gsWbLEcDgcxuLFi409e/YYP/3pT42goCAjOzvbMAzDuP32242ZM2e69l+3bp3h4eFhPPvss8bevXuN2bNnszSXmzW3h3/84x8NT09P49133zVOnDjh+iopKXHXEC55ze3h/2I1A/drbg8zMzMNf39/Y/r06cb+/fuN//znP0ZERITx+9//3l1DuKQ1t3+zZ882/P39jX/+859Genq68emnnxqJiYnGjTfe6K4hXPJKSkqM7du3G9u3bzckGc8995yxfft248iRI4ZhGMbMmTON22+/3bX/uaW5fvnLXxp79+415s+fz9JcZvbSSy8ZXbp0MTw9PY1hw4YZGzZscL03evRoY+rUqXX2f/vtt40ePXoYnp6eRp8+fYxly5a1c8X4X83pYdeuXQ1J9b5mz57d/oXDpbk/h99GmO0YmtvD9evXG8nJyYbD4TASEhKMP/zhD0Z1dXU7V41zmtO/qqoq47e//a2RmJhoeHl5GbGxscYDDzxgnDp1qv0Lh2EYhvH55583+Hfbub5NnTrVGD16dL1jBg4caHh6ehoJCQnG66+/3u51G4ZhWAyD6/kAAAAwJ+bMAgAAwLQIswAAADAtwiwAAABMizALAAAA0yLMAgAAwLQIswAAADAtwiwAAABMizALAAAA0yLMAsAlzGKx6IMPPpAkHT58WBaLRTt27HBrTQDQHIRZAHCTO++8UxaLRRaLRXa7XfHx8Xr00UdVXl7u7tIAwDQ83F0AAFzKJk6cqNdff11VVVXaunWrpk6dKovFoqefftrdpQGAKXBlFgDcyOFwKCoqSrGxsZoyZYrGjh2rlStXSpKcTqfmzp2r+Ph4eXt7a8CAAXr33XfrHP/NN9/ouuuuU0BAgPz9/TVq1CilpaVJkjZv3qxx48YpLCxMgYGBGj16tLZt29buYwSAtkSYBYAOYvfu3Vq/fr08PT0lSXPnztXf/vY3LVy4UN98840efvhh3Xbbbfriiy8kSVlZWbriiivkcDi0evVqbd26VXfffbeqq6slSSUlJZo6darWrl2rDRs2qHv37po0aZJKSkrcNkYAaG1MMwAAN/rPf/4jPz8/VVdXq6KiQlarVX/5y19UUVGhp556Sp999plSUlIkSQkJCVq7dq1eeeUVjR49WvPnz1dgYKCWLFkiu90uSerRo4frs6+66qo65/rrX/+qoKAgffHFF7ruuuvab5AA0IYIswDgRmPGjNGCBQtUWlqq559/Xh4eHvrhD3+ob775RmVlZRo3blyd/SsrKzVo0CBJ0o4dOzRq1ChXkP1fOTk5euyxx7RmzRqdPHlSNTU1KisrU2ZmZpuPCwDaC2EWANzI19dX3bp1kyQtWrRIAwYM0Guvvaa+fftKkpYtW6aYmJg6xzgcDkmSt7f3eT976tSpys/P1wsvvKCuXbvK4XAoJSVFlZWVbTASAHAPwiwAdBBWq1W//vWvNWPGDB04cEAOh0OZmZkaPXp0g/v3799fb7zxhqqqqhq8Ortu3Tq9/PLLmjRpkiTp6NGjysvLa9MxAEB74wYwAOhAfvSjH8lms+mVV17RI488oocfflhvvPGG0tLStG3bNr300kt64403JEnTp09XcXGxfvzjH2vLli06ePCg/v73v2v//v2SpO7du+vvf/+79u7dq40bN+rWW2/9zqu5AGA2XJkFgA7Ew8ND06dP15/+9CdlZGQoPDxcc+fOVXp6uoKCgjR48GD9+te/liSFhoZq9erV+uUvf6nRo0fLZrNp4MCBGjlypCTptdde009/+lMNHjxYsbGxeuqpp/TII4+4c3gA0OoshmEY7i4CAAAAaAmmGQAAAMC0CLMAAAAwLcIsAAAATIswCwAAANMizAIAAMC0CLMAAAAwLcIsAAAATIswCwAAANMizAIAAMC0CLMAAAAwLcIsAAAATOv/A2/8yWU0Xt0QAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import precision_recall_curve\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load your dataset\n",
    "data = pd.read_csv('MalwareData.csv')  \n",
    "X = data.drop('legitimate', axis=1) \n",
    "y = data['legitimate']\n",
    "\n",
    "# Example synthetic data for demonstration (remove this when using your actual data)\n",
    "from sklearn.datasets import make_classification\n",
    "X, y = make_classification(n_samples=100, n_features=20, n_classes=2, random_state=42)\n",
    "\n",
    "# Split the dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train the KNN model\n",
    "knModel = KNeighborsClassifier(n_neighbors=1)\n",
    "knModel.fit(X_train, y_train)\n",
    "\n",
    "# Get predicted probabilities\n",
    "y_scores = knModel.predict_proba(X_test)[:, 1]  # Probabilities for the positive class\n",
    "\n",
    "# Calculate precision and recall\n",
    "precision, recall, _ = precision_recall_curve(y_test, y_scores)\n",
    "\n",
    "# Plot the precision-recall curve\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(recall, precision, marker='o')\n",
    "plt.title('Precision-Recall Curve')\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n",
    "# graph that shows how well it performs by plotting precision vs recall. Summarizes overall performance of the model\n",
    "# Recall = True Positives/ True Positives + False Negatives\n",
    " \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "6a9557d6-f3b9-4e90-9864-35acb2711292",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load your dataset\n",
    "data = pd.read_csv('MalwareData.csv')  \n",
    "X = data.drop('legitimate', axis=1)  \n",
    "y = data['legitimate']\n",
    "\n",
    "# Example synthetic data for demonstration (remove this when using your actual data)\n",
    "from sklearn.datasets import make_classification\n",
    "X, y = make_classification(n_samples=100, n_features=20, n_classes=2, random_state=42)\n",
    "\n",
    "# Split the dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train the KNN model\n",
    "knModel = KNeighborsClassifier(n_neighbors=1)\n",
    "knModel.fit(X_train, y_train)\n",
    "\n",
    "# Get predicted probabilities\n",
    "y_scores = knModel.predict_proba(X_test)[:, 1]  # Probabilities for the positive class\n",
    "\n",
    "# Calculate ROC curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_scores)\n",
    "roc_auc = auc(fpr, tpr)  # Calculate AUC\n",
    "\n",
    "# Plot the ROC curve\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(fpr, tpr, color='blue', label='ROC curve (area = {:.2f})'.format(roc_auc))\n",
    "plt.plot([0, 1], [0, 1], color='red', linestyle='--')  # Diagonal line for random chance\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
    "plt.legend(loc='lower right')\n",
    "plt.grid()\n",
    "plt.show()\n",
    "\n",
    "#shows how well the model performs over various different thresholds. (0.92 ROC curve is great)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4eb42b9-29b8-4561-b991-0e993fd1195e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
